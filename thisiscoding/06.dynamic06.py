# 병사 배치하기
'''
병사를 배치할 떄는 전투력이 높은 병사가 앞쪽에 오도록 내림차순으로 배치하고자 합니다.
특정한 위치에 있는 병사를 열외시키는 방법을 이용합니다.
남아있는 병사의 수가 최대가 되도록 한다.

병사에 대한 정보가 주어졌을 때, 남아있는 병사의 수가 최대가 되도록 하기 위해서 열외시켜야 하는 병사의 수를 출력

입력
첫째 줄 : 병사의 수 N (1<=N<=2000)
둘째 줄 : 각 병사의 전투력이 차례로, 10,000,000보다 작거나 같은 자연수
7

출력
열외시켜야 하는 병사의 수를 출력
15 11 4 8 5 2 4
'''

# 내가 푼 풀이
n = 7
array = [15, 11, 4, 8, 5, 2, 4]

# cut = []

# for i in range(1 , n) :
#     if array[i-1] < array[i] :
#         cut.append(array[i-1])
# print(cut)
# print(len(cut))

# 문제 풀이
'''
가장 긴 중가하는 부분 수열(LIS)와 유사한 문제
array={4 2 5 8 11 15} -> {4 5 8 11 15}

본 문제는 가장 긴 감소하는 부분 수열을 찾는 문제
'''
# n = int(input())
# array = list(map(int, input().split()))
# 순서를 뒤집어 '최장 증가 부분 수열' 문제로 변환
array.reverse()

# 다이나믹 프로그래밍을 위한 1차원 DP 테이블 초기화
dp = [1] * n

# 가장 긴 증가하는 부분 수열(LIS) 알고리즘 수행
for i in range(1, n) :
    print("i : ", i)
    for j in range(0, i) :
        if array[j] < array[i] :
            dp[i] = max(dp[i], dp[j] + 1)
            print(dp,"=================")
        else :
            print("pass")

# 열외해야 하는 병사의 최소 수를 출력
print(n - max(dp))
